// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package eventpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	EventFeed(ctx context.Context, opts ...grpc.CallOption) (Events_EventFeedClient, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) EventFeed(ctx context.Context, opts ...grpc.CallOption) (Events_EventFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Events_ServiceDesc.Streams[0], "/eventpb.Events/EventFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsEventFeedClient{stream}
	return x, nil
}

type Events_EventFeedClient interface {
	Send(*EventRequest) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type eventsEventFeedClient struct {
	grpc.ClientStream
}

func (x *eventsEventFeedClient) Send(m *EventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsEventFeedClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility
type EventsServer interface {
	EventFeed(Events_EventFeedServer) error
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (UnimplementedEventsServer) EventFeed(Events_EventFeedServer) error {
	return status.Errorf(codes.Unimplemented, "method EventFeed not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_EventFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServer).EventFeed(&eventsEventFeedServer{stream})
}

type Events_EventFeedServer interface {
	Send(*EventResponse) error
	Recv() (*EventRequest, error)
	grpc.ServerStream
}

type eventsEventFeedServer struct {
	grpc.ServerStream
}

func (x *eventsEventFeedServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsEventFeedServer) Recv() (*EventRequest, error) {
	m := new(EventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventpb.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventFeed",
			Handler:       _Events_EventFeed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "eventpb/event.proto",
}

// TableAddrClient is the client API for TableAddr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableAddrClient interface {
	TableAddr(ctx context.Context, opts ...grpc.CallOption) (TableAddr_TableAddrClient, error)
}

type tableAddrClient struct {
	cc grpc.ClientConnInterface
}

func NewTableAddrClient(cc grpc.ClientConnInterface) TableAddrClient {
	return &tableAddrClient{cc}
}

func (c *tableAddrClient) TableAddr(ctx context.Context, opts ...grpc.CallOption) (TableAddr_TableAddrClient, error) {
	stream, err := c.cc.NewStream(ctx, &TableAddr_ServiceDesc.Streams[0], "/eventpb.TableAddr/TableAddr", opts...)
	if err != nil {
		return nil, err
	}
	x := &tableAddrTableAddrClient{stream}
	return x, nil
}

type TableAddr_TableAddrClient interface {
	Send(*TableAddrRequest) error
	Recv() (*TableAddrResponse, error)
	grpc.ClientStream
}

type tableAddrTableAddrClient struct {
	grpc.ClientStream
}

func (x *tableAddrTableAddrClient) Send(m *TableAddrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tableAddrTableAddrClient) Recv() (*TableAddrResponse, error) {
	m := new(TableAddrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TableAddrServer is the server API for TableAddr service.
// All implementations must embed UnimplementedTableAddrServer
// for forward compatibility
type TableAddrServer interface {
	TableAddr(TableAddr_TableAddrServer) error
	mustEmbedUnimplementedTableAddrServer()
}

// UnimplementedTableAddrServer must be embedded to have forward compatible implementations.
type UnimplementedTableAddrServer struct {
}

func (UnimplementedTableAddrServer) TableAddr(TableAddr_TableAddrServer) error {
	return status.Errorf(codes.Unimplemented, "method TableAddr not implemented")
}
func (UnimplementedTableAddrServer) mustEmbedUnimplementedTableAddrServer() {}

// UnsafeTableAddrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableAddrServer will
// result in compilation errors.
type UnsafeTableAddrServer interface {
	mustEmbedUnimplementedTableAddrServer()
}

func RegisterTableAddrServer(s grpc.ServiceRegistrar, srv TableAddrServer) {
	s.RegisterService(&TableAddr_ServiceDesc, srv)
}

func _TableAddr_TableAddr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TableAddrServer).TableAddr(&tableAddrTableAddrServer{stream})
}

type TableAddr_TableAddrServer interface {
	Send(*TableAddrResponse) error
	Recv() (*TableAddrRequest, error)
	grpc.ServerStream
}

type tableAddrTableAddrServer struct {
	grpc.ServerStream
}

func (x *tableAddrTableAddrServer) Send(m *TableAddrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tableAddrTableAddrServer) Recv() (*TableAddrRequest, error) {
	m := new(TableAddrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TableAddr_ServiceDesc is the grpc.ServiceDesc for TableAddr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableAddr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventpb.TableAddr",
	HandlerType: (*TableAddrServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TableAddr",
			Handler:       _TableAddr_TableAddr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "eventpb/event.proto",
}
