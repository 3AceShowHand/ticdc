// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heartbeatpb/heartbeat.proto

package heartbeatpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Action int32

const (
	Action_None  Action = 0
	Action_Write Action = 1
	Action_Pass  Action = 2
)

var Action_name = map[int32]string{
	0: "None",
	1: "Write",
	2: "Pass",
}

var Action_value = map[string]int32{
	"None":  0,
	"Write": 1,
	"Pass":  2,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{0}
}

type TableSpan struct {
}

func (m *TableSpan) Reset()         { *m = TableSpan{} }
func (m *TableSpan) String() string { return proto.CompactTextString(m) }
func (*TableSpan) ProtoMessage()    {}
func (*TableSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{0}
}
func (m *TableSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpan.Merge(m, src)
}
func (m *TableSpan) XXX_Size() int {
	return m.Size()
}
func (m *TableSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpan.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpan proto.InternalMessageInfo

type TableSpanProgress struct {
	Span           *TableSpan   `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	IsBlocked      bool         `protobuf:"varint,2,opt,name=IsBlocked,proto3" json:"IsBlocked,omitempty"`
	BlockTs        uint64       `protobuf:"varint,3,opt,name=BlockTs,proto3" json:"BlockTs,omitempty"`
	BlockTableSpan []*TableSpan `protobuf:"bytes,4,rep,name=BlockTableSpan,proto3" json:"BlockTableSpan,omitempty"`
	CheckpointTs   uint64       `protobuf:"varint,5,opt,name=CheckpointTs,proto3" json:"CheckpointTs,omitempty"`
	DispatcherID   uint64       `protobuf:"varint,6,opt,name=dispatcherID,proto3" json:"dispatcherID,omitempty"`
}

func (m *TableSpanProgress) Reset()         { *m = TableSpanProgress{} }
func (m *TableSpanProgress) String() string { return proto.CompactTextString(m) }
func (*TableSpanProgress) ProtoMessage()    {}
func (*TableSpanProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{1}
}
func (m *TableSpanProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSpanProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSpanProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSpanProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpanProgress.Merge(m, src)
}
func (m *TableSpanProgress) XXX_Size() int {
	return m.Size()
}
func (m *TableSpanProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpanProgress.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpanProgress proto.InternalMessageInfo

func (m *TableSpanProgress) GetSpan() *TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *TableSpanProgress) GetIsBlocked() bool {
	if m != nil {
		return m.IsBlocked
	}
	return false
}

func (m *TableSpanProgress) GetBlockTs() uint64 {
	if m != nil {
		return m.BlockTs
	}
	return 0
}

func (m *TableSpanProgress) GetBlockTableSpan() []*TableSpan {
	if m != nil {
		return m.BlockTableSpan
	}
	return nil
}

func (m *TableSpanProgress) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *TableSpanProgress) GetDispatcherID() uint64 {
	if m != nil {
		return m.DispatcherID
	}
	return 0
}

type HeartBeatRequest struct {
	Progress                 []*TableSpanProgress `protobuf:"bytes,1,rep,name=progress,proto3" json:"progress,omitempty"`
	EventDispatcherManagerID uint64               `protobuf:"varint,2,opt,name=eventDispatcherManagerID,proto3" json:"eventDispatcherManagerID,omitempty"`
}

func (m *HeartBeatRequest) Reset()         { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()    {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{2}
}
func (m *HeartBeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartBeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatRequest.Merge(m, src)
}
func (m *HeartBeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatRequest proto.InternalMessageInfo

func (m *HeartBeatRequest) GetProgress() []*TableSpanProgress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *HeartBeatRequest) GetEventDispatcherManagerID() uint64 {
	if m != nil {
		return m.EventDispatcherManagerID
	}
	return 0
}

type TableProgress struct {
	Span         *TableSpan `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	IsBlocked    bool       `protobuf:"varint,2,opt,name=IsBlocked,proto3" json:"IsBlocked,omitempty"`
	BlockTs      uint64     `protobuf:"varint,3,opt,name=BlockTs,proto3" json:"BlockTs,omitempty"`
	CheckpointTs uint64     `protobuf:"varint,4,opt,name=CheckpointTs,proto3" json:"CheckpointTs,omitempty"`
}

func (m *TableProgress) Reset()         { *m = TableProgress{} }
func (m *TableProgress) String() string { return proto.CompactTextString(m) }
func (*TableProgress) ProtoMessage()    {}
func (*TableProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{3}
}
func (m *TableProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableProgress.Merge(m, src)
}
func (m *TableProgress) XXX_Size() int {
	return m.Size()
}
func (m *TableProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_TableProgress.DiscardUnknown(m)
}

var xxx_messageInfo_TableProgress proto.InternalMessageInfo

func (m *TableProgress) GetSpan() *TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *TableProgress) GetIsBlocked() bool {
	if m != nil {
		return m.IsBlocked
	}
	return false
}

func (m *TableProgress) GetBlockTs() uint64 {
	if m != nil {
		return m.BlockTs
	}
	return 0
}

func (m *TableProgress) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

// 这名字重新取，我真的要吐了
type TableProgressInfo struct {
	DispatcherID    uint64           `protobuf:"varint,1,opt,name=dispatcherID,proto3" json:"dispatcherID,omitempty"`
	TableProgresses []*TableProgress `protobuf:"bytes,2,rep,name=tableProgresses,proto3" json:"tableProgresses,omitempty"`
	Action          Action           `protobuf:"varint,3,opt,name=action,proto3,enum=heartbeatpb.Action" json:"action,omitempty"`
}

func (m *TableProgressInfo) Reset()         { *m = TableProgressInfo{} }
func (m *TableProgressInfo) String() string { return proto.CompactTextString(m) }
func (*TableProgressInfo) ProtoMessage()    {}
func (*TableProgressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{4}
}
func (m *TableProgressInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableProgressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableProgressInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableProgressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableProgressInfo.Merge(m, src)
}
func (m *TableProgressInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableProgressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableProgressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableProgressInfo proto.InternalMessageInfo

func (m *TableProgressInfo) GetDispatcherID() uint64 {
	if m != nil {
		return m.DispatcherID
	}
	return 0
}

func (m *TableProgressInfo) GetTableProgresses() []*TableProgress {
	if m != nil {
		return m.TableProgresses
	}
	return nil
}

func (m *TableProgressInfo) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_None
}

type HeartBeatResponse struct {
	Info                     []*TableProgressInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	EventDispatcherManagerID uint64               `protobuf:"varint,2,opt,name=eventDispatcherManagerID,proto3" json:"eventDispatcherManagerID,omitempty"`
}

func (m *HeartBeatResponse) Reset()         { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()    {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{5}
}
func (m *HeartBeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartBeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatResponse.Merge(m, src)
}
func (m *HeartBeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatResponse proto.InternalMessageInfo

func (m *HeartBeatResponse) GetInfo() []*TableProgressInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *HeartBeatResponse) GetEventDispatcherManagerID() uint64 {
	if m != nil {
		return m.EventDispatcherManagerID
	}
	return 0
}

type CreateEventDispatcherManagerRequest struct {
	ChangefeedID uint64 `protobuf:"varint,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
}

func (m *CreateEventDispatcherManagerRequest) Reset()         { *m = CreateEventDispatcherManagerRequest{} }
func (m *CreateEventDispatcherManagerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEventDispatcherManagerRequest) ProtoMessage()    {}
func (*CreateEventDispatcherManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{6}
}
func (m *CreateEventDispatcherManagerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateEventDispatcherManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateEventDispatcherManagerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateEventDispatcherManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEventDispatcherManagerRequest.Merge(m, src)
}
func (m *CreateEventDispatcherManagerRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateEventDispatcherManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEventDispatcherManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEventDispatcherManagerRequest proto.InternalMessageInfo

func (m *CreateEventDispatcherManagerRequest) GetChangefeedID() uint64 {
	if m != nil {
		return m.ChangefeedID
	}
	return 0
}

type CreateEventDispatcherManagerResponse struct {
	ChangefeedID uint64 `protobuf:"varint,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
}

func (m *CreateEventDispatcherManagerResponse) Reset()         { *m = CreateEventDispatcherManagerResponse{} }
func (m *CreateEventDispatcherManagerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateEventDispatcherManagerResponse) ProtoMessage()    {}
func (*CreateEventDispatcherManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{7}
}
func (m *CreateEventDispatcherManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateEventDispatcherManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateEventDispatcherManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateEventDispatcherManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEventDispatcherManagerResponse.Merge(m, src)
}
func (m *CreateEventDispatcherManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateEventDispatcherManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEventDispatcherManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEventDispatcherManagerResponse proto.InternalMessageInfo

func (m *CreateEventDispatcherManagerResponse) GetChangefeedID() uint64 {
	if m != nil {
		return m.ChangefeedID
	}
	return 0
}

type RemoveEventDispatcherManagerRequest struct {
	ChangefeedID uint64 `protobuf:"varint,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
}

func (m *RemoveEventDispatcherManagerRequest) Reset()         { *m = RemoveEventDispatcherManagerRequest{} }
func (m *RemoveEventDispatcherManagerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveEventDispatcherManagerRequest) ProtoMessage()    {}
func (*RemoveEventDispatcherManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{8}
}
func (m *RemoveEventDispatcherManagerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveEventDispatcherManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveEventDispatcherManagerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveEventDispatcherManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveEventDispatcherManagerRequest.Merge(m, src)
}
func (m *RemoveEventDispatcherManagerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveEventDispatcherManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveEventDispatcherManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveEventDispatcherManagerRequest proto.InternalMessageInfo

func (m *RemoveEventDispatcherManagerRequest) GetChangefeedID() uint64 {
	if m != nil {
		return m.ChangefeedID
	}
	return 0
}

type RemoveEventDispatcherManagerResponse struct {
	ChangefeedID uint64 `protobuf:"varint,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
}

func (m *RemoveEventDispatcherManagerResponse) Reset()         { *m = RemoveEventDispatcherManagerResponse{} }
func (m *RemoveEventDispatcherManagerResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveEventDispatcherManagerResponse) ProtoMessage()    {}
func (*RemoveEventDispatcherManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{9}
}
func (m *RemoveEventDispatcherManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveEventDispatcherManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveEventDispatcherManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveEventDispatcherManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveEventDispatcherManagerResponse.Merge(m, src)
}
func (m *RemoveEventDispatcherManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveEventDispatcherManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveEventDispatcherManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveEventDispatcherManagerResponse proto.InternalMessageInfo

func (m *RemoveEventDispatcherManagerResponse) GetChangefeedID() uint64 {
	if m != nil {
		return m.ChangefeedID
	}
	return 0
}

func init() {
	proto.RegisterEnum("heartbeatpb.Action", Action_name, Action_value)
	proto.RegisterType((*TableSpan)(nil), "heartbeatpb.TableSpan")
	proto.RegisterType((*TableSpanProgress)(nil), "heartbeatpb.TableSpanProgress")
	proto.RegisterType((*HeartBeatRequest)(nil), "heartbeatpb.HeartBeatRequest")
	proto.RegisterType((*TableProgress)(nil), "heartbeatpb.TableProgress")
	proto.RegisterType((*TableProgressInfo)(nil), "heartbeatpb.TableProgressInfo")
	proto.RegisterType((*HeartBeatResponse)(nil), "heartbeatpb.HeartBeatResponse")
	proto.RegisterType((*CreateEventDispatcherManagerRequest)(nil), "heartbeatpb.CreateEventDispatcherManagerRequest")
	proto.RegisterType((*CreateEventDispatcherManagerResponse)(nil), "heartbeatpb.CreateEventDispatcherManagerResponse")
	proto.RegisterType((*RemoveEventDispatcherManagerRequest)(nil), "heartbeatpb.RemoveEventDispatcherManagerRequest")
	proto.RegisterType((*RemoveEventDispatcherManagerResponse)(nil), "heartbeatpb.RemoveEventDispatcherManagerResponse")
}

func init() { proto.RegisterFile("heartbeatpb/heartbeat.proto", fileDescriptor_6d584080fdadb670) }

var fileDescriptor_6d584080fdadb670 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0xa4, 0xdb, 0x98, 0xbc, 0xb4, 0x35, 0x19, 0x41, 0x86, 0x58, 0x97, 0xb0, 0x15, 0x1a,
	0x2a, 0xa4, 0x35, 0xde, 0x7a, 0x10, 0x4c, 0x23, 0x18, 0xc1, 0x52, 0xd6, 0x80, 0xa0, 0xa7, 0x49,
	0xf2, 0xf2, 0x83, 0xd6, 0x99, 0x75, 0x67, 0xec, 0x3f, 0xe0, 0x41, 0xf0, 0xe4, 0xcd, 0x3f, 0x41,
	0xf0, 0x2f, 0xf1, 0xd8, 0xa3, 0x47, 0x49, 0xfe, 0x10, 0x25, 0x93, 0xec, 0x66, 0xb3, 0x69, 0xc2,
	0x8a, 0xd2, 0xdb, 0xcc, 0x7b, 0xdf, 0xfb, 0xe6, 0x7b, 0xdf, 0xb7, 0x21, 0x70, 0x6f, 0x80, 0xdc,
	0xd7, 0x6d, 0xe4, 0xda, 0x6b, 0x1f, 0x86, 0xe7, 0xaa, 0xe7, 0x4b, 0x2d, 0x69, 0x3e, 0xd2, 0x74,
	0xf2, 0x90, 0x6b, 0xf1, 0xf6, 0x05, 0xbe, 0xf2, 0xb8, 0x70, 0x7e, 0x13, 0x28, 0x86, 0xb7, 0x33,
	0x5f, 0xf6, 0x7d, 0x54, 0x8a, 0x1e, 0x80, 0xa5, 0x3c, 0x2e, 0x18, 0x29, 0x93, 0x4a, 0xbe, 0x76,
	0xb7, 0x1a, 0x19, 0xaf, 0x86, 0x68, 0xd7, 0x60, 0xe8, 0x2e, 0xe4, 0x9a, 0xaa, 0x7e, 0x21, 0x3b,
	0xe7, 0xd8, 0x65, 0xe9, 0x32, 0xa9, 0x64, 0xdd, 0x79, 0x81, 0x32, 0xb8, 0x65, 0x8e, 0x2d, 0xc5,
	0x36, 0xca, 0xa4, 0x62, 0xb9, 0xc1, 0x95, 0x3e, 0x81, 0x9d, 0xe9, 0x31, 0xe0, 0x63, 0x56, 0x79,
	0x63, 0xcd, 0x6b, 0x31, 0x34, 0x75, 0x60, 0xeb, 0x64, 0x80, 0x9d, 0x73, 0x4f, 0x0e, 0x85, 0x6e,
	0x29, 0xb6, 0x69, 0xe8, 0x17, 0x6a, 0x13, 0x4c, 0x77, 0xa8, 0x3c, 0xae, 0x3b, 0x03, 0xf4, 0x9b,
	0x0d, 0x96, 0x99, 0x62, 0xa2, 0x35, 0xe7, 0x33, 0x81, 0xc2, 0xf3, 0xc9, 0x8b, 0x75, 0xe4, 0xda,
	0xc5, 0xf7, 0x1f, 0x50, 0x69, 0x7a, 0x0c, 0x59, 0x6f, 0x66, 0x06, 0x23, 0x46, 0x96, 0x7d, 0xbd,
	0xac, 0xc0, 0x32, 0x37, 0xc4, 0xd3, 0x63, 0x60, 0x78, 0x89, 0x42, 0x37, 0xc2, 0x57, 0x5e, 0x72,
	0xc1, 0xfb, 0x46, 0x40, 0xda, 0x08, 0x58, 0xd9, 0x77, 0xbe, 0x12, 0xd8, 0x36, 0xdc, 0x37, 0x1a,
	0x45, 0xdc, 0x4a, 0x6b, 0xd9, 0x4a, 0xe7, 0x7b, 0xf0, 0xa1, 0x04, 0xca, 0x9a, 0xa2, 0x27, 0x97,
	0x0c, 0x26, 0xcb, 0x06, 0xd3, 0x06, 0xdc, 0xd6, 0xd1, 0x41, 0x54, 0x2c, 0x6d, 0x2c, 0x2d, 0x2d,
	0x2f, 0x13, 0xda, 0x19, 0x1f, 0xa1, 0x0f, 0x21, 0xc3, 0x3b, 0x7a, 0x28, 0x85, 0x11, 0xbf, 0x53,
	0xbb, 0xb3, 0x30, 0xfc, 0xd4, 0xb4, 0xdc, 0x19, 0xc4, 0xf9, 0x48, 0xa0, 0x18, 0xc9, 0x54, 0x79,
	0x52, 0x28, 0xa4, 0x35, 0xb0, 0x86, 0xa2, 0x27, 0x57, 0x07, 0x1a, 0x5d, 0xcd, 0x35, 0xd8, 0x7f,
	0x0a, 0xb3, 0x09, 0x7b, 0x27, 0x3e, 0x72, 0x8d, 0xcf, 0xae, 0x45, 0x04, 0xdf, 0x9a, 0x03, 0x5b,
	0x9d, 0x01, 0x17, 0x7d, 0xec, 0x21, 0x76, 0xe7, 0x1e, 0x46, 0x6b, 0xce, 0x0b, 0x78, 0xb0, 0x9e,
	0x6a, 0xb6, 0x62, 0x12, 0xae, 0x26, 0xec, 0xb9, 0xf8, 0x4e, 0x5e, 0xfe, 0x1f, 0x59, 0xeb, 0xa9,
	0x92, 0xcb, 0x3a, 0xd8, 0x87, 0xcc, 0x34, 0x45, 0x9a, 0x05, 0xeb, 0x54, 0x0a, 0x2c, 0xa4, 0x68,
	0x0e, 0x36, 0x5f, 0xfb, 0x43, 0x8d, 0x05, 0x32, 0x29, 0x9e, 0x71, 0xa5, 0x0a, 0xe9, 0xda, 0x5b,
	0xc8, 0x85, 0xd9, 0xd2, 0xd3, 0xe8, 0xe5, 0xfe, 0x42, 0xa4, 0xf1, 0x1f, 0x75, 0xc9, 0x5e, 0xd5,
	0x9e, 0xaa, 0xac, 0x90, 0x23, 0x52, 0xfb, 0x96, 0x86, 0xe2, 0xd2, 0x1e, 0xf4, 0x13, 0x81, 0xdd,
	0x75, 0xfe, 0xd3, 0xa3, 0x05, 0xea, 0x04, 0xa9, 0x97, 0x1e, 0xfd, 0xc5, 0xc4, 0x5c, 0x9f, 0x51,
	0xb2, 0xce, 0xf2, 0x98, 0x92, 0x04, 0x41, 0xc7, 0x94, 0x24, 0xc9, 0x73, 0xa2, 0xa4, 0xbe, 0xff,
	0x63, 0x64, 0x93, 0xab, 0x91, 0x4d, 0x7e, 0x8d, 0x6c, 0xf2, 0x65, 0x6c, 0xa7, 0xae, 0xc6, 0x76,
	0xea, 0xe7, 0xd8, 0x4e, 0xbd, 0xd9, 0xae, 0x1e, 0x46, 0x18, 0xdb, 0x19, 0xf3, 0x1f, 0xf4, 0xf8,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0xdb, 0x6a, 0xf7, 0xa2, 0x06, 0x00, 0x00,
}

func (m *TableSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TableSpanProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpanProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableSpanProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DispatcherID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.DispatcherID))
		i--
		dAtA[i] = 0x30
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BlockTableSpan) > 0 {
		for iNdEx := len(m.BlockTableSpan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockTableSpan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BlockTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.BlockTs))
		i--
		dAtA[i] = 0x18
	}
	if m.IsBlocked {
		i--
		if m.IsBlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeartBeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartBeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventDispatcherManagerID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.EventDispatcherManagerID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Progress) > 0 {
		for iNdEx := len(m.Progress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TableProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.BlockTs))
		i--
		dAtA[i] = 0x18
	}
	if m.IsBlocked {
		i--
		if m.IsBlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableProgressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableProgressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableProgressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TableProgresses) > 0 {
		for iNdEx := len(m.TableProgresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TableProgresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DispatcherID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.DispatcherID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeartBeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartBeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventDispatcherManagerID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.EventDispatcherManagerID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateEventDispatcherManagerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEventDispatcherManagerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateEventDispatcherManagerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChangefeedID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ChangefeedID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateEventDispatcherManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEventDispatcherManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateEventDispatcherManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChangefeedID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ChangefeedID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveEventDispatcherManagerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEventDispatcherManagerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveEventDispatcherManagerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChangefeedID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ChangefeedID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveEventDispatcherManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEventDispatcherManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveEventDispatcherManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChangefeedID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ChangefeedID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHeartbeat(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeartbeat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TableSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TableSpanProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.IsBlocked {
		n += 2
	}
	if m.BlockTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.BlockTs))
	}
	if len(m.BlockTableSpan) > 0 {
		for _, e := range m.BlockTableSpan {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	if m.DispatcherID != 0 {
		n += 1 + sovHeartbeat(uint64(m.DispatcherID))
	}
	return n
}

func (m *HeartBeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progress) > 0 {
		for _, e := range m.Progress {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.EventDispatcherManagerID != 0 {
		n += 1 + sovHeartbeat(uint64(m.EventDispatcherManagerID))
	}
	return n
}

func (m *TableProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.IsBlocked {
		n += 2
	}
	if m.BlockTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.BlockTs))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	return n
}

func (m *TableProgressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DispatcherID != 0 {
		n += 1 + sovHeartbeat(uint64(m.DispatcherID))
	}
	if len(m.TableProgresses) > 0 {
		for _, e := range m.TableProgresses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.Action != 0 {
		n += 1 + sovHeartbeat(uint64(m.Action))
	}
	return n
}

func (m *HeartBeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.EventDispatcherManagerID != 0 {
		n += 1 + sovHeartbeat(uint64(m.EventDispatcherManagerID))
	}
	return n
}

func (m *CreateEventDispatcherManagerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != 0 {
		n += 1 + sovHeartbeat(uint64(m.ChangefeedID))
	}
	return n
}

func (m *CreateEventDispatcherManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != 0 {
		n += 1 + sovHeartbeat(uint64(m.ChangefeedID))
	}
	return n
}

func (m *RemoveEventDispatcherManagerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != 0 {
		n += 1 + sovHeartbeat(uint64(m.ChangefeedID))
	}
	return n
}

func (m *RemoveEventDispatcherManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != 0 {
		n += 1 + sovHeartbeat(uint64(m.ChangefeedID))
	}
	return n
}

func sovHeartbeat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeartbeat(x uint64) (n int) {
	return sovHeartbeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableSpanProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpanProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpanProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlocked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTs", wireType)
			}
			m.BlockTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTableSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockTableSpan = append(m.BlockTableSpan, &TableSpan{})
			if err := m.BlockTableSpan[len(m.BlockTableSpan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherID", wireType)
			}
			m.DispatcherID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DispatcherID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progress = append(m.Progress, &TableSpanProgress{})
			if err := m.Progress[len(m.Progress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDispatcherManagerID", wireType)
			}
			m.EventDispatcherManagerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventDispatcherManagerID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlocked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTs", wireType)
			}
			m.BlockTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableProgressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableProgressInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableProgressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherID", wireType)
			}
			m.DispatcherID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DispatcherID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableProgresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableProgresses = append(m.TableProgresses, &TableProgress{})
			if err := m.TableProgresses[len(m.TableProgresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &TableProgressInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDispatcherManagerID", wireType)
			}
			m.EventDispatcherManagerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventDispatcherManagerID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEventDispatcherManagerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEventDispatcherManagerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEventDispatcherManagerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			m.ChangefeedID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangefeedID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEventDispatcherManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEventDispatcherManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEventDispatcherManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			m.ChangefeedID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangefeedID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEventDispatcherManagerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveEventDispatcherManagerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveEventDispatcherManagerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			m.ChangefeedID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangefeedID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEventDispatcherManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveEventDispatcherManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveEventDispatcherManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			m.ChangefeedID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangefeedID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeartbeat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeartbeat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeartbeat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeartbeat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeartbeat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeartbeat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeartbeat = fmt.Errorf("proto: unexpected end of group")
)
